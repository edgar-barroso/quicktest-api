generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String
  role         Role
  createdAt    DateTime @default(now())

  questions   Question[]
  teaching    Class[]       @relation("TeacherClasses")
  studentIn   Class[]       @relation("ClassStudents")
  Exam        Exam[]
  ExamAttempt ExamAttempt[]
}

model Class {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  teacherId String
  teacher   User     @relation("TeacherClasses", fields: [teacherId], references: [id])
  students  User[]   @relation("ClassStudents")
  Exam      Exam[]
}

model Exam {
  id          String        @id @default(uuid())
  title       String
  description String
  authorId    String
  classId     String
  createdAt   DateTime      @default(now())
  openDate    DateTime
  closeDate   DateTime
  author      User          @relation(fields: [authorId], references: [id])
  class       Class         @relation(fields: [classId], references: [id])
  questions   Question[]
  ExamAttempt ExamAttempt[]
}

model Question {
  id          String   @id @default(uuid())
  description String
  createdAt   DateTime @default(now())
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  choices     Choice[]
  exams       Exam[]
  Answer      Answer[]
}

model Choice {
  id         String   @id @default(uuid())
  text       String
  isCorrect  Boolean
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  Answer     Answer[]
}

model ExamAttempt {
  id         String    @id @default(uuid())
  studentId  String
  examId     String
  startedAt  DateTime  @default(now())
  user       User      @relation(fields: [studentId], references: [id])
  exam       Exam      @relation(fields: [examId], references: [id])
  answers    Answer[]
}

model Answer {
  id            String      @id @default(uuid())
  questionId    String
  choiceId      String
  examAttemptId String
  choice        Choice      @relation(fields: [choiceId], references: [id])
  question      Question    @relation(fields: [questionId], references: [id])
  examAttempt   ExamAttempt @relation(fields: [examAttemptId], references: [id])
}

enum Role {
  STUDENT
  TEACHER
}
